# Tests for the libsodium-based Poly1305 implementation

import unittest

import nim_chacha20_poly1305/[common, poly1305]

suite "poly1305_libsodium":
    test "poly_mac test 2 - known working case":
        var
            poly_in: Poly1305
            otk_in: Key = [
                0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8,
                0x36'u8, 0xe5'u8, 0xf6'u8, 0xb5'u8, 0xc5'u8, 0xe0'u8, 0x60'u8, 0x70'u8, 0xf0'u8, 0xef'u8, 0xca'u8, 0x96'u8, 0x22'u8, 0x7a'u8, 0x86'u8, 0x3e'u8,
            ]
            mac_data = [
                0x41'u8, 0x6e'u8, 0x79'u8, 0x20'u8, 0x73'u8, 0x75'u8, 0x62'u8, 0x6d'u8, 0x69'u8, 0x73'u8, 0x73'u8, 0x69'u8, 0x6f'u8, 0x6e'u8, 0x20'u8, 0x74'u8,
                0x6f'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8, 0x20'u8, 0x69'u8, 0x6e'u8, 0x74'u8, 0x65'u8, 0x6e'u8,
                0x64'u8, 0x65'u8, 0x64'u8, 0x20'u8, 0x62'u8, 0x79'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x43'u8, 0x6f'u8, 0x6e'u8, 0x74'u8, 0x72'u8,
                0x69'u8, 0x62'u8, 0x75'u8, 0x74'u8, 0x6f'u8, 0x72'u8, 0x20'u8, 0x66'u8, 0x6f'u8, 0x72'u8, 0x20'u8, 0x70'u8, 0x75'u8, 0x62'u8, 0x6c'u8, 0x69'u8,
                0x63'u8, 0x61'u8, 0x74'u8, 0x69'u8, 0x6f'u8, 0x6e'u8, 0x20'u8, 0x61'u8, 0x73'u8, 0x20'u8, 0x61'u8, 0x6c'u8, 0x6c'u8, 0x20'u8, 0x6f'u8, 0x72'u8,
                0x20'u8, 0x70'u8, 0x61'u8, 0x72'u8, 0x74'u8, 0x20'u8, 0x6f'u8, 0x66'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x20'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8,
                0x20'u8, 0x49'u8, 0x6e'u8, 0x74'u8, 0x65'u8, 0x72'u8, 0x6e'u8, 0x65'u8, 0x74'u8, 0x2d'u8, 0x44'u8, 0x72'u8, 0x61'u8, 0x66'u8, 0x74'u8, 0x20'u8,
                0x6f'u8, 0x72'u8, 0x20'u8, 0x52'u8, 0x46'u8, 0x43'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x64'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x79'u8, 0x20'u8, 0x73'u8,
                0x74'u8, 0x61'u8, 0x74'u8, 0x65'u8, 0x6d'u8, 0x65'u8, 0x6e'u8, 0x74'u8, 0x20'u8, 0x6d'u8, 0x61'u8, 0x64'u8, 0x65'u8, 0x20'u8, 0x77'u8, 0x69'u8,
                0x74'u8, 0x68'u8, 0x69'u8, 0x6e'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x63'u8, 0x6f'u8, 0x6e'u8, 0x74'u8, 0x65'u8, 0x78'u8, 0x74'u8,
                0x20'u8, 0x6f'u8, 0x66'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x20'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8, 0x20'u8, 0x61'u8, 0x63'u8, 0x74'u8, 0x69'u8,
                0x76'u8, 0x69'u8, 0x74'u8, 0x79'u8, 0x20'u8, 0x69'u8, 0x73'u8, 0x20'u8, 0x63'u8, 0x6f'u8, 0x6e'u8, 0x73'u8, 0x69'u8, 0x64'u8, 0x65'u8, 0x72'u8,
                0x65'u8, 0x64'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x20'u8, 0x22'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8, 0x20'u8, 0x43'u8, 0x6f'u8, 0x6e'u8, 0x74'u8,
                0x72'u8, 0x69'u8, 0x62'u8, 0x75'u8, 0x74'u8, 0x69'u8, 0x6f'u8, 0x6e'u8, 0x22'u8, 0x2e'u8, 0x20'u8, 0x53'u8, 0x75'u8, 0x63'u8, 0x68'u8, 0x20'u8,
                0x73'u8, 0x74'u8, 0x61'u8, 0x74'u8, 0x65'u8, 0x6d'u8, 0x65'u8, 0x6e'u8, 0x74'u8, 0x73'u8, 0x20'u8, 0x69'u8, 0x6e'u8, 0x63'u8, 0x6c'u8, 0x75'u8,
                0x64'u8, 0x65'u8, 0x20'u8, 0x6f'u8, 0x72'u8, 0x61'u8, 0x6c'u8, 0x20'u8, 0x73'u8, 0x74'u8, 0x61'u8, 0x74'u8, 0x65'u8, 0x6d'u8, 0x65'u8, 0x6e'u8,
                0x74'u8, 0x73'u8, 0x20'u8, 0x69'u8, 0x6e'u8, 0x20'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8, 0x20'u8, 0x73'u8, 0x65'u8, 0x73'u8, 0x73'u8, 0x69'u8,
                0x6f'u8, 0x6e'u8, 0x73'u8, 0x2c'u8, 0x20'u8, 0x61'u8, 0x73'u8, 0x20'u8, 0x77'u8, 0x65'u8, 0x6c'u8, 0x6c'u8, 0x20'u8, 0x61'u8, 0x73'u8, 0x20'u8,
                0x77'u8, 0x72'u8, 0x69'u8, 0x74'u8, 0x74'u8, 0x65'u8, 0x6e'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x64'u8, 0x20'u8, 0x65'u8, 0x6c'u8, 0x65'u8, 0x63'u8,
                0x74'u8, 0x72'u8, 0x6f'u8, 0x6e'u8, 0x69'u8, 0x63'u8, 0x20'u8, 0x63'u8, 0x6f'u8, 0x6d'u8, 0x6d'u8, 0x75'u8, 0x6e'u8, 0x69'u8, 0x63'u8, 0x61'u8,
                0x74'u8, 0x69'u8, 0x6f'u8, 0x6e'u8, 0x73'u8, 0x20'u8, 0x6d'u8, 0x61'u8, 0x64'u8, 0x65'u8, 0x20'u8, 0x61'u8, 0x74'u8, 0x20'u8, 0x61'u8, 0x6e'u8,
                0x79'u8, 0x20'u8, 0x74'u8, 0x69'u8, 0x6d'u8, 0x65'u8, 0x20'u8, 0x6f'u8, 0x72'u8, 0x20'u8, 0x70'u8, 0x6c'u8, 0x61'u8, 0x63'u8, 0x65'u8, 0x2c'u8,
                0x20'u8, 0x77'u8, 0x68'u8, 0x69'u8, 0x63'u8, 0x68'u8, 0x20'u8, 0x61'u8, 0x72'u8, 0x65'u8, 0x20'u8, 0x61'u8, 0x64'u8, 0x64'u8, 0x72'u8, 0x65'u8,
                0x73'u8, 0x73'u8, 0x65'u8, 0x64'u8, 0x20'u8, 0x74'u8, 0x6f'u8,
            ]
            tag_expected: Tag = [
                0x36'u8, 0xe5'u8, 0xf6'u8, 0xb5'u8, 0xc5'u8, 0xe0'u8, 0x60'u8, 0x70'u8, 0xf0'u8, 0xef'u8, 0xca'u8, 0x96'u8, 0x22'u8, 0x7a'u8, 0x86'u8, 0x3e'u8,
            ]
        poly_in.poly1305_init(otk_in)
        poly_in.poly1305_update(mac_data)
        check(poly_in.tag == tag_expected)
        
    test "simple test":
        var
            poly_in: Poly1305
            key: Key = [
                0x01'u8, 0x02'u8, 0x03'u8, 0x04'u8, 0x05'u8, 0x06'u8, 0x07'u8, 0x08'u8,
                0x09'u8, 0x0a'u8, 0x0b'u8, 0x0c'u8, 0x0d'u8, 0x0e'u8, 0x0f'u8, 0x10'u8,
                0x11'u8, 0x12'u8, 0x13'u8, 0x14'u8, 0x15'u8, 0x16'u8, 0x17'u8, 0x18'u8,
                0x19'u8, 0x1a'u8, 0x1b'u8, 0x1c'u8, 0x1d'u8, 0x1e'u8, 0x1f'u8, 0x20'u8,
            ]
            data = "Hello, constant-time Poly1305!"
        
        poly_in.poly1305_init(key)
        poly_in.poly1305_update(cast[seq[byte]](data))
        
        # Just check that we get a non-zero tag (actual correctness test is above)
        var all_zero = true
        for b in poly_in.tag:
            if b != 0:
                all_zero = false
                break
        check(not all_zero)
