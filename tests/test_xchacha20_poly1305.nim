
import unittest
import nim_chacha20_poly1305/[common, xchacha20_poly1305]
import std/sysrand

suite "xchacha20_poly1305":
    test "hchacha":
        var
            key_in: Key = [
                0x00'u8, 0x01'u8, 0x02'u8, 0x03'u8, 0x04'u8, 0x05'u8, 0x06'u8, 0x07'u8, 0x08'u8, 0x09'u8, 0x0a'u8, 0x0b'u8, 0x0c'u8, 0x0d'u8, 0x0e'u8, 0x0f'u8, 0x10'u8, 0x11'u8, 0x12'u8, 0x13'u8, 0x14'u8, 0x15'u8, 0x16'u8, 0x17'u8, 0x18'u8, 0x19'u8, 0x1a'u8, 0x1b'u8, 0x1c'u8, 0x1d'u8, 0x1e'u8, 0x1f'u8
            ]
            nonce_in: XKNonce = [
                0x00'u8, 0x00'u8, 0x00'u8, 0x09'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x4a'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x31'u8, 0x41'u8, 0x59'u8, 0x27'u8
            ]
            # hchacha_state_expected_uint32: State = [
            #     0x61707865'u32, 0x3320646e'u32, 0x79622d32'u32, 0x6b206574'u32,
            #     0x03020100'u32, 0x07060504'u32, 0x0b0a0908'u32, 0x0f0e0d0c'u32,
            #     0x13121110'u32, 0x17161514'u32, 0x1b1a1918'u32, 0x1f1e1d1c'u32,
            #     0x09000000'u32, 0x4a000000'u32, 0x00000000'u32, 0x27594131'u32,
            # ]
            key_out: Key
            hchacha_key_expected: Key
            hchacha_key_expected_uint32: array[8, uint32] = [
                # uint32 is flipped is test vector wrong?
                    # for i in countup(0, hchacha_key_expected.high, 4):
                    #     swap(hchacha_key_expected[0+i], hchacha_key_expected[3+i])
                    #     swap(hchacha_key_expected[1+i], hchacha_key_expected[2+i])

                # 0x82413b42'u32, 0x27b27bfe'u32, 0xd30e4250'u32, 0x8a877d73'u32,
                # 0xa0f9e4d5'u32, 0x8a74a853'u32, 0xc12ec413'u32, 0x26d3ecdc'u32

                0x423b4182'u32, 0xfe7bb227'u32, 0x50420ed3'u32, 0x737d878a'u32,
                0xd5e4f9a0'u32, 0x53a8748a'u32, 0x13c42ec1'u32, 0xdcecd326'u32,
            ]
       
        copyMem(hchacha_key_expected[0].addr, hchacha_key_expected_uint32[0].addr, 32)
        
        key_out = hchacha20(key_in, nonce_in)
        check(key_out == hchacha_key_expected)

    test "xchacha20_aead_poly1305 1":
        var
            key_in: Key = [
                0x80'u8, 0x81'u8, 0x82'u8, 0x83'u8, 0x84'u8, 0x85'u8, 0x86'u8, 0x87'u8, 0x88'u8, 0x89'u8, 0x8a'u8, 0x8b'u8, 0x8c'u8, 0x8d'u8, 0x8e'u8, 0x8f'u8,
                0x90'u8, 0x91'u8, 0x92'u8, 0x93'u8, 0x94'u8, 0x95'u8, 0x96'u8, 0x97'u8, 0x98'u8, 0x99'u8, 0x9a'u8, 0x9b'u8, 0x9c'u8, 0x9d'u8, 0x9e'u8, 0x9f'u8,
            ]
            # fixed_common_part = [
            #     0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8
            # ]

            nonce_in: XNonce = [
                0x40'u8, 0x41'u8, 0x42'u8, 0x43'u8, 0x44'u8, 0x45'u8, 0x46'u8, 0x47'u8, 0x48'u8, 0x49'u8, 0x4a'u8, 0x4b'u8, 0x4c'u8, 0x4d'u8, 0x4e'u8, 0x4f'u8,
                0x50'u8, 0x51'u8, 0x52'u8, 0x53'u8, 0x54'u8, 0x55'u8, 0x56'u8, 0x57'u8,
            ]
            counter: Counter
            # Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it.
            plain_data: array[114, byte] = [
                0x4c'u8, 0x61'u8, 0x64'u8, 0x69'u8, 0x65'u8, 0x73'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x64'u8, 0x20'u8, 0x47'u8, 0x65'u8, 0x6e'u8, 0x74'u8, 0x6c'u8,
                0x65'u8, 0x6d'u8, 0x65'u8, 0x6e'u8, 0x20'u8, 0x6f'u8, 0x66'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x63'u8, 0x6c'u8, 0x61'u8, 0x73'u8,
                0x73'u8, 0x20'u8, 0x6f'u8, 0x66'u8, 0x20'u8, 0x27'u8, 0x39'u8, 0x39'u8, 0x3a'u8, 0x20'u8, 0x49'u8, 0x66'u8, 0x20'u8, 0x49'u8, 0x20'u8, 0x63'u8,
                0x6f'u8, 0x75'u8, 0x6c'u8, 0x64'u8, 0x20'u8, 0x6f'u8, 0x66'u8, 0x66'u8, 0x65'u8, 0x72'u8, 0x20'u8, 0x79'u8, 0x6f'u8, 0x75'u8, 0x20'u8, 0x6f'u8,
                0x6e'u8, 0x6c'u8, 0x79'u8, 0x20'u8, 0x6f'u8, 0x6e'u8, 0x65'u8, 0x20'u8, 0x74'u8, 0x69'u8, 0x70'u8, 0x20'u8, 0x66'u8, 0x6f'u8, 0x72'u8, 0x20'u8,
                0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x66'u8, 0x75'u8, 0x74'u8, 0x75'u8, 0x72'u8, 0x65'u8, 0x2c'u8, 0x20'u8, 0x73'u8, 0x75'u8, 0x6e'u8, 0x73'u8,
                0x63'u8, 0x72'u8, 0x65'u8, 0x65'u8, 0x6e'u8, 0x20'u8, 0x77'u8, 0x6f'u8, 0x75'u8, 0x6c'u8, 0x64'u8, 0x20'u8, 0x62'u8, 0x65'u8, 0x20'u8, 0x69'u8,
                0x74'u8, 0x2e'u8,

            ]   
            auth_data_in = [
                0x50'u8, 0x51'u8, 0x52'u8, 0x53'u8, 0xc0'u8, 0xc1'u8, 0xc2'u8, 0xc3'u8, 0xc4'u8, 0xc5'u8, 0xc6'u8, 0xc7'u8,

            ]
            # otk_out: Key
            tag_out: Tag
            cipher_bytes_out: array[114, byte]
            # otk_expected: Key = [
            #     0x7b'u8, 0x19'u8, 0x1f'u8, 0x80'u8, 0xf3'u8, 0x61'u8, 0xf0'u8, 0x99'u8, 0x09'u8, 0x4f'u8, 0x6f'u8, 0x4b'u8, 0x8f'u8, 0xb9'u8, 0x7d'u8, 0xf8'u8,
            #     0x47'u8, 0xcc'u8, 0x68'u8, 0x73'u8, 0xa8'u8, 0xf2'u8, 0xb1'u8, 0x90'u8, 0xdd'u8, 0x73'u8, 0x80'u8, 0x71'u8, 0x83'u8, 0xf9'u8, 0x07'u8, 0xd5'u8,
            # ]
            tag_expected: Tag = [
                0xc0'u8, 0x87'u8, 0x59'u8, 0x24'u8, 0xc1'u8, 0xc7'u8, 0x98'u8, 0x79'u8, 0x47'u8, 0xde'u8, 0xaf'u8, 0xd8'u8, 0x78'u8, 0x0a'u8, 0xcf'u8, 0x49'u8
            ]
            cipher_data_expected: array[114, byte] = [
                0xbd'u8, 0x6d'u8, 0x17'u8, 0x9d'u8, 0x3e'u8, 0x83'u8, 0xd4'u8, 0x3b'u8, 0x95'u8, 0x76'u8, 0x57'u8, 0x94'u8, 0x93'u8, 0xc0'u8, 0xe9'u8, 0x39'u8,
                0x57'u8, 0x2a'u8, 0x17'u8, 0x00'u8, 0x25'u8, 0x2b'u8, 0xfa'u8, 0xcc'u8, 0xbe'u8, 0xd2'u8, 0x90'u8, 0x2c'u8, 0x21'u8, 0x39'u8, 0x6c'u8, 0xbb'u8,
                0x73'u8, 0x1c'u8, 0x7f'u8, 0x1b'u8, 0x0b'u8, 0x4a'u8, 0xa6'u8, 0x44'u8, 0x0b'u8, 0xf3'u8, 0xa8'u8, 0x2f'u8, 0x4e'u8, 0xda'u8, 0x7e'u8, 0x39'u8,
                0xae'u8, 0x64'u8, 0xc6'u8, 0x70'u8, 0x8c'u8, 0x54'u8, 0xc2'u8, 0x16'u8, 0xcb'u8, 0x96'u8, 0xb7'u8, 0x2e'u8, 0x12'u8, 0x13'u8, 0xb4'u8, 0x52'u8,
                0x2f'u8, 0x8c'u8, 0x9b'u8, 0xa4'u8, 0x0d'u8, 0xb5'u8, 0xd9'u8, 0x45'u8, 0xb1'u8, 0x1b'u8, 0x69'u8, 0xb9'u8, 0x82'u8, 0xc1'u8, 0xbb'u8, 0x9e'u8,
                0x3f'u8, 0x3f'u8, 0xac'u8, 0x2b'u8, 0xc3'u8, 0x69'u8, 0x48'u8, 0x8f'u8, 0x76'u8, 0xb2'u8, 0x38'u8, 0x35'u8, 0x65'u8, 0xd3'u8, 0xff'u8, 0xf9'u8,
                0x21'u8, 0xf9'u8, 0x66'u8, 0x4c'u8, 0x97'u8, 0x63'u8, 0x7d'u8, 0xa9'u8, 0x76'u8, 0x88'u8, 0x12'u8, 0xf6'u8, 0x15'u8, 0xc6'u8, 0x8b'u8, 0x13'u8,
                0xb5'u8, 0x2e'u8
            ]

        xchacha20_aead_poly1305_encrypt(
            key_in,
            nonce_in,
            counter,
            auth_data_in,
            plain_data,
            cipher_bytes_out,
            tag_out
        )
        check(cipher_bytes_out == cipher_data_expected)
        check(tag_out == tag_expected)
    test "xchacha20_aead_poly1305_encrypt, xchacha20_aead_poly1305_decrypt":
        var
            key_in: Key = [
                0x80'u8, 0x81'u8, 0x82'u8, 0x83'u8, 0x84'u8, 0x85'u8, 0x86'u8, 0x87'u8, 0x88'u8, 0x89'u8, 0x8a'u8, 0x8b'u8, 0x8c'u8, 0x8d'u8, 0x8e'u8, 0x8f'u8,
                0x90'u8, 0x91'u8, 0x92'u8, 0x93'u8, 0x94'u8, 0x95'u8, 0x96'u8, 0x97'u8, 0x98'u8, 0x99'u8, 0x9a'u8, 0x9b'u8, 0x9c'u8, 0x9d'u8, 0x9e'u8, 0x9f'u8,
            ]
            nonce_in: XNonce
            counter: Counter
            # Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it.
            plain_data: array[114, byte] = [
                0x4c'u8, 0x61'u8, 0x64'u8, 0x69'u8, 0x65'u8, 0x73'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x64'u8, 0x20'u8, 0x47'u8, 0x65'u8, 0x6e'u8, 0x74'u8, 0x6c'u8,
                0x65'u8, 0x6d'u8, 0x65'u8, 0x6e'u8, 0x20'u8, 0x6f'u8, 0x66'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x63'u8, 0x6c'u8, 0x61'u8, 0x73'u8,
                0x73'u8, 0x20'u8, 0x6f'u8, 0x66'u8, 0x20'u8, 0x27'u8, 0x39'u8, 0x39'u8, 0x3a'u8, 0x20'u8, 0x49'u8, 0x66'u8, 0x20'u8, 0x49'u8, 0x20'u8, 0x63'u8,
                0x6f'u8, 0x75'u8, 0x6c'u8, 0x64'u8, 0x20'u8, 0x6f'u8, 0x66'u8, 0x66'u8, 0x65'u8, 0x72'u8, 0x20'u8, 0x79'u8, 0x6f'u8, 0x75'u8, 0x20'u8, 0x6f'u8,
                0x6e'u8, 0x6c'u8, 0x79'u8, 0x20'u8, 0x6f'u8, 0x6e'u8, 0x65'u8, 0x20'u8, 0x74'u8, 0x69'u8, 0x70'u8, 0x20'u8, 0x66'u8, 0x6f'u8, 0x72'u8, 0x20'u8,
                0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x66'u8, 0x75'u8, 0x74'u8, 0x75'u8, 0x72'u8, 0x65'u8, 0x2c'u8, 0x20'u8, 0x73'u8, 0x75'u8, 0x6e'u8, 0x73'u8,
                0x63'u8, 0x72'u8, 0x65'u8, 0x65'u8, 0x6e'u8, 0x20'u8, 0x77'u8, 0x6f'u8, 0x75'u8, 0x6c'u8, 0x64'u8, 0x20'u8, 0x62'u8, 0x65'u8, 0x20'u8, 0x69'u8,
                0x74'u8, 0x2e'u8,

            ]   
            auth_data_in = [
                0x50'u8, 0x51'u8, 0x52'u8, 0x53'u8, 0xc0'u8, 0xc1'u8, 0xc2'u8, 0xc3'u8, 0xc4'u8, 0xc5'u8, 0xc6'u8, 0xc7'u8,

            ]
            cipher_data_decrypted: array[114, byte]
            tag_out: Tag
            tag_expected: Tag 
            cipher_data_expected: array[114, byte]

        discard urandom(nonce_in)
        xchacha20_aead_poly1305_encrypt(
            key_in,
            nonce_in,
            counter,
            auth_data_in,
            plain_data,
            cipher_data_expected,
            tag_expected
        )
        counter = 0

        xchacha20_aead_poly1305_decrypt(
            key_in,
            nonce_in,
            counter,
            auth_data_in,
            cipher_data_decrypted,
            cipher_data_expected,
            tag_out
        )
        check(cipher_data_decrypted == plain_data)
        check(tag_out == tag_expected)