# This is just an example to get you started. You may wish to put all of your
# tests into a single file, or separate them into multiple `test1`, `test2`
# etc. files (better names are recommended, just make sure the name starts with
# the letter 't').
#
# To run these tests, simply execute `nimble test`.

import unittest

import nim_chacha20_poly1305/[common, poly1305]
import stint

suite "poly1305":
    test "poly1305_clamp":
        var
            poly_in: Poly1305
            r_expected = "806d5400e52447c036d555408bed685"

        poly_in.r = fromBytes(UInt256, [
            0x85'u8, 0xd6'u8, 0xbe'u8, 0x78'u8, 0x57'u8, 0x55'u8, 0x6d'u8, 0x33'u8,
            0x7f'u8, 0x44'u8, 0x52'u8, 0xfe'u8, 0x42'u8, 0xd5'u8, 0x06'u8, 0xa8'u8
        ])
        poly_in.poly1305_clamp()
        check(poly_in.r.toHex() == r_expected)

    test "poly_mac":
        var
            poly_in: Poly1305
            key_in: Key = [
                0x85'u8, 0xd6'u8, 0xbe'u8, 0x78'u8, 0x57'u8, 0x55'u8, 0x6d'u8, 0x33'u8,
                0x7f'u8, 0x44'u8, 0x52'u8, 0xfe'u8, 0x42'u8, 0xd5'u8, 0x06'u8, 0xa8'u8,
                0x01'u8, 0x03'u8, 0x80'u8, 0x8a'u8, 0xfb'u8, 0x0d'u8, 0xb2'u8, 0xfd'u8,
                0x4a'u8, 0xbf'u8, 0xf6'u8, 0xaf'u8, 0x41'u8, 0x49'u8, 0xf5'u8, 0x1b'u8
            ]
            auth_message_in = "Cryptographic Forum Research Group"
            auth_message_in_bytes: array[34, byte]

            r_expected: array[16, byte] = [
                0x85'u8, 0xd6'u8, 0xbe'u8, 0x78'u8, 0x57'u8, 0x55'u8, 0x6d'u8, 0x33'u8,
                0x7f'u8, 0x44'u8, 0x52'u8, 0xfe'u8, 0x42'u8, 0xd5'u8, 0x06'u8, 0xa8'u8
            ]
            s_expected: array[16, byte] = [
                0x01'u8, 0x03'u8, 0x80'u8, 0x8a'u8, 0xfb'u8, 0x0d'u8, 0xb2'u8, 0xfd'u8,
                0x4a'u8, 0xbf'u8, 0xf6'u8, 0xaf'u8, 0x41'u8, 0x49'u8, 0xf5'u8, 0x1b'u8
            ]
            tag_expected: Tag = [
                0xa8'u8, 0x06'u8, 0x1d'u8, 0xc1'u8, 0x30'u8, 0x51'u8, 0x36'u8, 0xc6'u8,
                0xc2'u8, 0x2b'u8, 0x8b'u8, 0xaf'u8, 0x0c'u8, 0x01'u8, 0x27'u8, 0xa9'u8
            ]
        copyMem(auth_message_in_bytes[0].addr, auth_message_in[0].addr, 34)

        poly_in.poly1305_init(key_in)
        check(poly_in.r.toBytesLE()[0..15] == r_expected)
        check(poly_in.s.toBytesLE()[0..15] == s_expected)

        poly_in.poly1305_update(auth_message_in_bytes)
        check(poly_in.tag == tag_expected)
    test "poly_mac 2":
        var
            poly_in: Poly1305
            otk_in: Key = [
                0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8,
                0x36'u8, 0xe5'u8, 0xf6'u8, 0xb5'u8, 0xc5'u8, 0xe0'u8, 0x60'u8, 0x70'u8, 0xf0'u8, 0xef'u8, 0xca'u8, 0x96'u8, 0x22'u8, 0x7a'u8, 0x86'u8, 0x3e'u8,
            ]
            mac_data = [
                0x41'u8, 0x6e'u8, 0x79'u8, 0x20'u8, 0x73'u8, 0x75'u8, 0x62'u8, 0x6d'u8, 0x69'u8, 0x73'u8, 0x73'u8, 0x69'u8, 0x6f'u8, 0x6e'u8, 0x20'u8, 0x74'u8,
                0x6f'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8, 0x20'u8, 0x69'u8, 0x6e'u8, 0x74'u8, 0x65'u8, 0x6e'u8,
                0x64'u8, 0x65'u8, 0x64'u8, 0x20'u8, 0x62'u8, 0x79'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x43'u8, 0x6f'u8, 0x6e'u8, 0x74'u8, 0x72'u8,
                0x69'u8, 0x62'u8, 0x75'u8, 0x74'u8, 0x6f'u8, 0x72'u8, 0x20'u8, 0x66'u8, 0x6f'u8, 0x72'u8, 0x20'u8, 0x70'u8, 0x75'u8, 0x62'u8, 0x6c'u8, 0x69'u8,
                0x63'u8, 0x61'u8, 0x74'u8, 0x69'u8, 0x6f'u8, 0x6e'u8, 0x20'u8, 0x61'u8, 0x73'u8, 0x20'u8, 0x61'u8, 0x6c'u8, 0x6c'u8, 0x20'u8, 0x6f'u8, 0x72'u8,
                0x20'u8, 0x70'u8, 0x61'u8, 0x72'u8, 0x74'u8, 0x20'u8, 0x6f'u8, 0x66'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x20'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8,
                0x20'u8, 0x49'u8, 0x6e'u8, 0x74'u8, 0x65'u8, 0x72'u8, 0x6e'u8, 0x65'u8, 0x74'u8, 0x2d'u8, 0x44'u8, 0x72'u8, 0x61'u8, 0x66'u8, 0x74'u8, 0x20'u8,
                0x6f'u8, 0x72'u8, 0x20'u8, 0x52'u8, 0x46'u8, 0x43'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x64'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x79'u8, 0x20'u8, 0x73'u8,
                0x74'u8, 0x61'u8, 0x74'u8, 0x65'u8, 0x6d'u8, 0x65'u8, 0x6e'u8, 0x74'u8, 0x20'u8, 0x6d'u8, 0x61'u8, 0x64'u8, 0x65'u8, 0x20'u8, 0x77'u8, 0x69'u8,
                0x74'u8, 0x68'u8, 0x69'u8, 0x6e'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x63'u8, 0x6f'u8, 0x6e'u8, 0x74'u8, 0x65'u8, 0x78'u8, 0x74'u8,
                0x20'u8, 0x6f'u8, 0x66'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x20'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8, 0x20'u8, 0x61'u8, 0x63'u8, 0x74'u8, 0x69'u8,
                0x76'u8, 0x69'u8, 0x74'u8, 0x79'u8, 0x20'u8, 0x69'u8, 0x73'u8, 0x20'u8, 0x63'u8, 0x6f'u8, 0x6e'u8, 0x73'u8, 0x69'u8, 0x64'u8, 0x65'u8, 0x72'u8,
                0x65'u8, 0x64'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x20'u8, 0x22'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8, 0x20'u8, 0x43'u8, 0x6f'u8, 0x6e'u8, 0x74'u8,
                0x72'u8, 0x69'u8, 0x62'u8, 0x75'u8, 0x74'u8, 0x69'u8, 0x6f'u8, 0x6e'u8, 0x22'u8, 0x2e'u8, 0x20'u8, 0x53'u8, 0x75'u8, 0x63'u8, 0x68'u8, 0x20'u8,
                0x73'u8, 0x74'u8, 0x61'u8, 0x74'u8, 0x65'u8, 0x6d'u8, 0x65'u8, 0x6e'u8, 0x74'u8, 0x73'u8, 0x20'u8, 0x69'u8, 0x6e'u8, 0x63'u8, 0x6c'u8, 0x75'u8,
                0x64'u8, 0x65'u8, 0x20'u8, 0x6f'u8, 0x72'u8, 0x61'u8, 0x6c'u8, 0x20'u8, 0x73'u8, 0x74'u8, 0x61'u8, 0x74'u8, 0x65'u8, 0x6d'u8, 0x65'u8, 0x6e'u8,
                0x74'u8, 0x73'u8, 0x20'u8, 0x69'u8, 0x6e'u8, 0x20'u8, 0x49'u8, 0x45'u8, 0x54'u8, 0x46'u8, 0x20'u8, 0x73'u8, 0x65'u8, 0x73'u8, 0x73'u8, 0x69'u8,
                0x6f'u8, 0x6e'u8, 0x73'u8, 0x2c'u8, 0x20'u8, 0x61'u8, 0x73'u8, 0x20'u8, 0x77'u8, 0x65'u8, 0x6c'u8, 0x6c'u8, 0x20'u8, 0x61'u8, 0x73'u8, 0x20'u8,
                0x77'u8, 0x72'u8, 0x69'u8, 0x74'u8, 0x74'u8, 0x65'u8, 0x6e'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x64'u8, 0x20'u8, 0x65'u8, 0x6c'u8, 0x65'u8, 0x63'u8,
                0x74'u8, 0x72'u8, 0x6f'u8, 0x6e'u8, 0x69'u8, 0x63'u8, 0x20'u8, 0x63'u8, 0x6f'u8, 0x6d'u8, 0x6d'u8, 0x75'u8, 0x6e'u8, 0x69'u8, 0x63'u8, 0x61'u8,
                0x74'u8, 0x69'u8, 0x6f'u8, 0x6e'u8, 0x73'u8, 0x20'u8, 0x6d'u8, 0x61'u8, 0x64'u8, 0x65'u8, 0x20'u8, 0x61'u8, 0x74'u8, 0x20'u8, 0x61'u8, 0x6e'u8,
                0x79'u8, 0x20'u8, 0x74'u8, 0x69'u8, 0x6d'u8, 0x65'u8, 0x20'u8, 0x6f'u8, 0x72'u8, 0x20'u8, 0x70'u8, 0x6c'u8, 0x61'u8, 0x63'u8, 0x65'u8, 0x2c'u8,
                0x20'u8, 0x77'u8, 0x68'u8, 0x69'u8, 0x63'u8, 0x68'u8, 0x20'u8, 0x61'u8, 0x72'u8, 0x65'u8, 0x20'u8, 0x61'u8, 0x64'u8, 0x64'u8, 0x72'u8, 0x65'u8,
                0x73'u8, 0x73'u8, 0x65'u8, 0x64'u8, 0x20'u8, 0x74'u8, 0x6f'u8,
            ]
            tag_expected: Tag = [
                0x36'u8, 0xe5'u8, 0xf6'u8, 0xb5'u8, 0xc5'u8, 0xe0'u8, 0x60'u8, 0x70'u8, 0xf0'u8, 0xef'u8, 0xca'u8, 0x96'u8, 0x22'u8, 0x7a'u8, 0x86'u8, 0x3e'u8,
            ]
        poly_in.poly1305_init(otk_in)
        poly_in.poly1305_update(mac_data)
        check(poly_in.tag == tag_expected)