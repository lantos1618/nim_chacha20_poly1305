# This is just an example to get you started. You may wish to put all of your
# tests into a single file, or separate them into multiple `test1`, `test2`
# etc. files (better names are recommended, just make sure the name starts with
# the letter 't').
#
# To run these tests, simply execute `nimble test`.

import unittest

import nim_chacha20_poly1305/[common, chacha20 ]
import stint

suite "chacha20":
    test "quarter_round uint32 test vectors":
        # https://datatracker.ietf.org/doc/html/rfc8439#section-2.1.1
        var
            a: uint32 = 0x11111111'u32
            b: uint32 = 0x01020304'u32
            c: uint32 = 0x9b8d6f43'u32
            d: uint32 = 0x01234567'u32
            a_expected: uint32 = 0xea2a92f4'u32
            b_expected: uint32 = 0xcb1cf8ce'u32
            c_expected: uint32 = 0x4581472e'u32
            d_expected: uint32 = 0x5881c4bb'u32
        
        chacha20_quarter_round(a, b, c, d)

        check(a == a_expected)
        check(b == b_expected)
        check(c == c_expected)
        check(d == d_expected)

    test "chacha20_quarter_round array[32, uint32] test vectors":
        # https://datatracker.ietf.org/doc/html/rfc8439#section-2.2.1
        var
            quarter_round_in : State = [
                0x879531e0'u32, 0xc5ecf37d'u32, 0x516461b1'u32, 0xc9a62f8a'u32,
                0x44c20ef3'u32, 0x3390af7f'u32, 0xd9fc690b'u32, 0x2a5f714c'u32,
                0x53372767'u32, 0xb00a5631'u32, 0x974c541a'u32, 0x359e9963'u32,
                0x5c971061'u32, 0x3d631689'u32, 0x2098d9d6'u32, 0x91dbd320'u32
            ]
            quarter_round_expected : State  = [
                0x879531e0'u32, 0xc5ecf37d'u32, 0xbdb886dc'u32, 0xc9a62f8a'u32,
                0x44c20ef3'u32, 0x3390af7f'u32, 0xd9fc690b'u32, 0xcfacafd2'u32,
                0xe46bea80'u32, 0xb00a5631'u32, 0x974c541a'u32, 0x359e9963'u32,
                0x5c971061'u32, 0xccc07c79'u32, 0x2098d9d6'u32, 0x91dbd320'u32
            ]
            
        chacha20_quarter_round(
            quarter_round_in[2], 
            quarter_round_in[7], 
            quarter_round_in[8], 
            quarter_round_in[13]
            )
        check(quarter_round_in == quarter_round_expected)

    test "chacha20_init_state":
        # chacha20_init_state
        # https://datatracker.ietf.org/doc/html/rfc8439#section-2.3.2
        var
            c_in: ChaCha
            initial_state_expected: State = [
                0x61707865'u32, 0x3320646e'u32, 0x79622d32'u32, 0x6b206574'u32,
                0x03020100'u32, 0x07060504'u32, 0x0b0a0908'u32, 0x0f0e0d0c'u32,
                0x13121110'u32, 0x17161514'u32, 0x1b1a1918'u32, 0x1f1e1d1c'u32,
                0x00000001'u32, 0x09000000'u32, 0x4a000000'u32, 0x00000000'u32
            ]
            
        c_in.key = [
                0x00'u8, 0x01'u8, 0x02'u8, 0x03'u8, 0x04'u8, 0x05'u8, 0x06'u8, 0x07'u8,
                0x08'u8, 0x09'u8, 0x0a'u8, 0x0b'u8, 0x0c'u8, 0x0d'u8, 0x0e'u8, 0x0f'u8,
                0x10'u8, 0x11'u8, 0x12'u8, 0x13'u8, 0x14'u8, 0x15'u8, 0x16'u8, 0x17'u8,
                0x18'u8, 0x19'u8, 0x1a'u8, 0x1b'u8, 0x1c'u8, 0x1d'u8, 0x1e'u8, 0x1f'u8
            ]
        c_in.nonce = [
               0x00'u8, 0x00'u8, 0x00'u8, 0x09'u8,
               0x00'u8, 0x00'u8, 0x00'u8, 0x4a'u8,
               0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8
            ]
        c_in.counter = 1
        chacha20_init_state(c_in)

        check(c_in.initial_state == initial_state_expected)
    test "chacha20_rounds":

        # chacha20_rounds
        var 
            state_chacha20_rounds_in:  State = [
                0x61707865'u32, 0x3320646e'u32, 0x79622d32'u32, 0x6b206574'u32,
                0x03020100'u32, 0x07060504'u32, 0x0b0a0908'u32, 0x0f0e0d0c'u32,
                0x13121110'u32, 0x17161514'u32, 0x1b1a1918'u32, 0x1f1e1d1c'u32,
                0x00000001'u32, 0x09000000'u32, 0x4a000000'u32, 0x00000000'u32
            ]

            rounds_expected:  State = [
                0x837778ab'u32, 0xe238d763'u32, 0xa67ae21e'u32, 0x5950bb2f'u32,
                0xc4f2d0c7'u32, 0xfc62bb2f'u32, 0x8fa018fc'u32, 0x3f5ec7b7'u32,
                0x335271c2'u32, 0xf29489f3'u32, 0xeabda8fc'u32, 0x82e46ebd'u32,
                0xd19c12b4'u32, 0xb04e16de'u32, 0x9e83d0cb'u32, 0x4e3c50a2'u32
            ]

        chachca20_rounds(state_chacha20_rounds_in)

        check( state_chacha20_rounds_in == rounds_expected)
    test "chacha20_add_serialize":
        # chacha20_add_serialize
        var
            c_in: ChaCha
            chacha20_add_serialize_out: array[64, byte]
            serialize_state_expected:  State = [
                0xe4e7f110'u32, 0x15593bd1'u32, 0x1fdd0f50'u32, 0xc47120a3'u32,
                0xc7f4d1c7'u32, 0x0368c033'u32, 0x9aaa2204'u32, 0x4e6cd4c3'u32,
                0x466482d2'u32, 0x09aa9f07'u32, 0x05d7c214'u32, 0xa2028bd9'u32,
                0xd19c12b5'u32, 0xb94e16de'u32, 0xe883d0cb'u32, 0x4e3c50a2'u32
            ]
            serialize_state_expected_bytes_0: array[64, byte]
        copyMem(
            serialize_state_expected_bytes_0[0].addr,
            serialize_state_expected[0].addr,
            64)
        c_in.initial_state = [
                0x837778ab'u32, 0xe238d763'u32, 0xa67ae21e'u32, 0x5950bb2f'u32,
                0xc4f2d0c7'u32, 0xfc62bb2f'u32, 0x8fa018fc'u32, 0x3f5ec7b7'u32,
                0x335271c2'u32, 0xf29489f3'u32, 0xeabda8fc'u32, 0x82e46ebd'u32,
                0xd19c12b4'u32, 0xb04e16de'u32, 0x9e83d0cb'u32, 0x4e3c50a2'u32
            ]
        c_in.state = [
                0x61707865'u32, 0x3320646e'u32, 0x79622d32'u32, 0x6b206574'u32,
                0x03020100'u32, 0x07060504'u32, 0x0b0a0908'u32, 0x0f0e0d0c'u32,
                0x13121110'u32, 0x17161514'u32, 0x1b1a1918'u32, 0x1f1e1d1c'u32,
                0x00000001'u32, 0x09000000'u32, 0x4a000000'u32, 0x00000000'u32
            ]
        chacha20_add_serialize(c_in ,chacha20_add_serialize_out)

        check(chacha20_add_serialize_out == serialize_state_expected_bytes_0)

    test "chacha_block":
        var
            c_in: ChaCha
            chacha20_block_out: Block
            serialize_state_expected:  State = [
                0xe4e7f110'u32, 0x15593bd1'u32, 0x1fdd0f50'u32, 0xc47120a3'u32,
                0xc7f4d1c7'u32, 0x0368c033'u32, 0x9aaa2204'u32, 0x4e6cd4c3'u32,
                0x466482d2'u32, 0x09aa9f07'u32, 0x05d7c214'u32, 0xa2028bd9'u32,
                0xd19c12b5'u32, 0xb94e16de'u32, 0xe883d0cb'u32, 0x4e3c50a2'u32
            ]
            serialize_state_expected_bytes_0: array[64, byte]
        # swap to cast
        copyMem(
            serialize_state_expected_bytes_0[0].addr,
            serialize_state_expected[0].addr,
            64)
        c_in.key = [
                0x00'u8, 0x01'u8, 0x02'u8, 0x03'u8, 0x04'u8, 0x05'u8, 0x06'u8, 0x07'u8,
                0x08'u8, 0x09'u8, 0x0a'u8, 0x0b'u8, 0x0c'u8, 0x0d'u8, 0x0e'u8, 0x0f'u8,
                0x10'u8, 0x11'u8, 0x12'u8, 0x13'u8, 0x14'u8, 0x15'u8, 0x16'u8, 0x17'u8,
                0x18'u8, 0x19'u8, 0x1a'u8, 0x1b'u8, 0x1c'u8, 0x1d'u8, 0x1e'u8, 0x1f'u8
            ]
        c_in.nonce = [
               0x00'u8, 0x00'u8, 0x00'u8, 0x09'u8,
               0x00'u8, 0x00'u8, 0x00'u8, 0x4a'u8,
               0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8
            ]
        c_in.counter = 1
        chacha20_block(c_in, chacha20_block_out) 
        check(chacha20_block_out == serialize_state_expected_bytes_0)

    test "chacha20_xor":
        # https://datatracker.ietf.org/doc/html/rfc8439#section-2.4.2
        var
            c_in: ChaCha
            plain_data = "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."
            plain_data_bytes: array[114, byte]
            
            cipher_data_expected: array[114, byte] = [
                0x6e'u8, 0x2e'u8, 0x35'u8, 0x9a'u8, 0x25'u8, 0x68'u8, 0xf9'u8, 0x80'u8,
                0x41'u8, 0xba'u8, 0x07'u8, 0x28'u8, 0xdd'u8, 0x0d'u8, 0x69'u8, 0x81'u8,
                0xe9'u8, 0x7e'u8, 0x7a'u8, 0xec'u8, 0x1d'u8, 0x43'u8, 0x60'u8, 0xc2'u8,
                0x0a'u8, 0x27'u8, 0xaf'u8, 0xcc'u8, 0xfd'u8, 0x9f'u8, 0xae'u8, 0x0b'u8,
                0xf9'u8, 0x1b'u8, 0x65'u8, 0xc5'u8, 0x52'u8, 0x47'u8, 0x33'u8, 0xab'u8,
                0x8f'u8, 0x59'u8, 0x3d'u8, 0xab'u8, 0xcd'u8, 0x62'u8, 0xb3'u8, 0x57'u8,
                0x16'u8, 0x39'u8, 0xd6'u8, 0x24'u8, 0xe6'u8, 0x51'u8, 0x52'u8, 0xab'u8,
                0x8f'u8, 0x53'u8, 0x0c'u8, 0x35'u8, 0x9f'u8, 0x08'u8, 0x61'u8, 0xd8'u8,
                0x07'u8, 0xca'u8, 0x0d'u8, 0xbf'u8, 0x50'u8, 0x0d'u8, 0x6a'u8, 0x61'u8,
                0x56'u8, 0xa3'u8, 0x8e'u8, 0x08'u8, 0x8a'u8, 0x22'u8, 0xb6'u8, 0x5e'u8,
                0x52'u8, 0xbc'u8, 0x51'u8, 0x4d'u8, 0x16'u8, 0xcc'u8, 0xf8'u8, 0x06'u8,
                0x81'u8, 0x8c'u8, 0xe9'u8, 0x1a'u8, 0xb7'u8, 0x79'u8, 0x37'u8, 0x36'u8,
                0x5a'u8, 0xf9'u8, 0x0b'u8, 0xbf'u8, 0x74'u8, 0xa3'u8, 0x5b'u8, 0xe6'u8,
                0xb4'u8, 0x0b'u8, 0x8e'u8, 0xed'u8, 0xf2'u8, 0x78'u8, 0x5e'u8, 0x42'u8,
                0x87'u8, 0x4d'u8
            ]
            cipher_data_out_bytes: array[114, byte]
        c_in.key = [
                0x00'u8, 0x01'u8, 0x02'u8, 0x03'u8, 0x04'u8, 0x05'u8, 0x06'u8, 0x07'u8,
                0x08'u8, 0x09'u8, 0x0a'u8, 0x0b'u8, 0x0c'u8, 0x0d'u8, 0x0e'u8, 0x0f'u8,
                0x10'u8, 0x11'u8, 0x12'u8, 0x13'u8, 0x14'u8, 0x15'u8, 0x16'u8, 0x17'u8,
                0x18'u8, 0x19'u8, 0x1a'u8, 0x1b'u8, 0x1c'u8, 0x1d'u8, 0x1e'u8, 0x1f'u8
            ]
        c_in.nonce = [
                0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x4a'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00
            ]
        c_in.counter = 1

        copyMem(plain_data_bytes[0].addr, plain_data[0].addr, 114)

        chacha20_xor(c_in, plain_data_bytes, cipher_data_out_bytes)

        check(cipher_data_out_bytes == cipher_data_expected)
    test "chacha20_xor 3":
        var
            c_in: ChaCha
            plain_text: array[127, byte] = [
                0x27'u8, 0x54'u8, 0x77'u8, 0x61'u8, 0x73'u8, 0x20'u8, 0x62'u8, 0x72'u8, 0x69'u8, 0x6c'u8, 0x6c'u8, 0x69'u8, 0x67'u8, 0x2c'u8, 0x20'u8, 0x61'u8,
                0x6e'u8, 0x64'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x73'u8, 0x6c'u8, 0x69'u8, 0x74'u8, 0x68'u8, 0x79'u8, 0x20'u8, 0x74'u8, 0x6f'u8,
                0x76'u8, 0x65'u8, 0x73'u8, 0x0a'u8, 0x44'u8, 0x69'u8, 0x64'u8, 0x20'u8, 0x67'u8, 0x79'u8, 0x72'u8, 0x65'u8, 0x20'u8, 0x61'u8, 0x6e'u8, 0x64'u8,
                0x20'u8, 0x67'u8, 0x69'u8, 0x6d'u8, 0x62'u8, 0x6c'u8, 0x65'u8, 0x20'u8, 0x69'u8, 0x6e'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x77'u8,
                0x61'u8, 0x62'u8, 0x65'u8, 0x3a'u8, 0x0a'u8, 0x41'u8, 0x6c'u8, 0x6c'u8, 0x20'u8, 0x6d'u8, 0x69'u8, 0x6d'u8, 0x73'u8, 0x79'u8, 0x20'u8, 0x77'u8,
                0x65'u8, 0x72'u8, 0x65'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x62'u8, 0x6f'u8, 0x72'u8, 0x6f'u8, 0x67'u8, 0x6f'u8, 0x76'u8, 0x65'u8,
                0x73'u8, 0x2c'u8, 0x0a'u8, 0x41'u8, 0x6e'u8, 0x64'u8, 0x20'u8, 0x74'u8, 0x68'u8, 0x65'u8, 0x20'u8, 0x6d'u8, 0x6f'u8, 0x6d'u8, 0x65'u8, 0x20'u8,
                0x72'u8, 0x61'u8, 0x74'u8, 0x68'u8, 0x73'u8, 0x20'u8, 0x6f'u8, 0x75'u8, 0x74'u8, 0x67'u8, 0x72'u8, 0x61'u8, 0x62'u8, 0x65'u8, 0x2e'u8
            ]
            cipher_text: array[127, byte]
            cipher_text_expected: array[127, byte] = [
                0x62'u8, 0xe6'u8, 0x34'u8, 0x7f'u8, 0x95'u8, 0xed'u8, 0x87'u8, 0xa4'u8, 0x5f'u8, 0xfa'u8, 0xe7'u8, 0x42'u8, 0x6f'u8, 0x27'u8, 0xa1'u8, 0xdf'u8,
                0x5f'u8, 0xb6'u8, 0x91'u8, 0x10'u8, 0x04'u8, 0x4c'u8, 0x0d'u8, 0x73'u8, 0x11'u8, 0x8e'u8, 0xff'u8, 0xa9'u8, 0x5b'u8, 0x01'u8, 0xe5'u8, 0xcf'u8,
                0x16'u8, 0x6d'u8, 0x3d'u8, 0xf2'u8, 0xd7'u8, 0x21'u8, 0xca'u8, 0xf9'u8, 0xb2'u8, 0x1e'u8, 0x5f'u8, 0xb1'u8, 0x4c'u8, 0x61'u8, 0x68'u8, 0x71'u8,
                0xfd'u8, 0x84'u8, 0xc5'u8, 0x4f'u8, 0x9d'u8, 0x65'u8, 0xb2'u8, 0x83'u8, 0x19'u8, 0x6c'u8, 0x7f'u8, 0xe4'u8, 0xf6'u8, 0x05'u8, 0x53'u8, 0xeb'u8,
                0xf3'u8, 0x9c'u8, 0x64'u8, 0x02'u8, 0xc4'u8, 0x22'u8, 0x34'u8, 0xe3'u8, 0x2a'u8, 0x35'u8, 0x6b'u8, 0x3e'u8, 0x76'u8, 0x43'u8, 0x12'u8, 0xa6'u8,
                0x1a'u8, 0x55'u8, 0x32'u8, 0x05'u8, 0x57'u8, 0x16'u8, 0xea'u8, 0xd6'u8, 0x96'u8, 0x25'u8, 0x68'u8, 0xf8'u8, 0x7d'u8, 0x3f'u8, 0x3f'u8, 0x77'u8,
                0x04'u8, 0xc6'u8, 0xa8'u8, 0xd1'u8, 0xbc'u8, 0xd1'u8, 0xbf'u8, 0x4d'u8, 0x50'u8, 0xd6'u8, 0x15'u8, 0x4b'u8, 0x6d'u8, 0xa7'u8, 0x31'u8, 0xb1'u8,
                0x87'u8, 0xb5'u8, 0x8d'u8, 0xfd'u8, 0x72'u8, 0x8a'u8, 0xfa'u8, 0x36'u8, 0x75'u8, 0x7a'u8, 0x79'u8, 0x7a'u8, 0xc1'u8, 0x88'u8, 0xd1'u8,
            ]
        c_in.key = [
            0x1c'u8, 0x92'u8, 0x40'u8, 0xa5'u8, 0xeb'u8, 0x55'u8, 0xd3'u8, 0x8a'u8, 0xf3'u8, 0x33'u8, 0x88'u8, 0x86'u8, 0x04'u8, 0xf6'u8, 0xb5'u8, 0xf0'u8,
            0x47'u8, 0x39'u8, 0x17'u8, 0xc1'u8, 0x40'u8, 0x2b'u8, 0x80'u8, 0x09'u8, 0x9d'u8, 0xca'u8, 0x5c'u8, 0xbc'u8, 0x20'u8, 0x70'u8, 0x75'u8, 0xc0'u8,

        ]
        c_in.nonce = [0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x02'u8]
        c_in.counter = 42
        chacha20_xor(c_in, plain_text, cipher_text)

        check( cipher_text == cipher_text_expected)
    test "chacha20_xor encrypt and decrypt":
        # https://datatracker.ietf.org/doc/html/rfc8439#section-2.4.2
        var
            c_in: ChaCha
            plain_data = "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."
            plain_data_bytes: array[114, byte]
            cipher_data_decrypted: array[114, byte]
            cipher_data_out_bytes: array[114, byte]
        c_in.key = [
                0x00'u8, 0x01'u8, 0x02'u8, 0x03'u8, 0x04'u8, 0x05'u8, 0x06'u8, 0x07'u8,
                0x08'u8, 0x09'u8, 0x0a'u8, 0x0b'u8, 0x0c'u8, 0x0d'u8, 0x0e'u8, 0x0f'u8,
                0x10'u8, 0x11'u8, 0x12'u8, 0x13'u8, 0x14'u8, 0x15'u8, 0x16'u8, 0x17'u8,
                0x18'u8, 0x19'u8, 0x1a'u8, 0x1b'u8, 0x1c'u8, 0x1d'u8, 0x1e'u8, 0x1f'u8
            ]
        c_in.nonce = [
                0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x4a'u8, 0x00'u8, 0x00'u8, 0x00'u8, 0x00
            ]
        c_in.counter = 0

        copyMem(plain_data_bytes[0].addr, plain_data[0].addr, 114)

        chacha20_xor(c_in, plain_data_bytes, cipher_data_out_bytes)
        c_in.counter = 0
        chacha20_xor(c_in, cipher_data_out_bytes, cipher_data_decrypted)

        check(cipher_data_decrypted == plain_data_bytes)